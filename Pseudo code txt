CLASS Order
// Global Variables
ql =  Queue list for pending orders
col =  Completed orders list
cd =   Customer dictionary to store customer profiles
FUNCTION ValidateDate(date)
TRY
Parse date in format "YYYY-MM-DD"
RETURN true
CATCH ValueError
RETURN false
END TRY
END FUNCTION
FUNCTION GetValidDateInput(prompt)
REPEAT
date = Get user input with prompt
IF ValidateDate(date) THEN
RETURN date
ELSE
Display "Invalid date format. Please use YYYY-MM-DD."
END IF
UNTIL valid date entered
END FUNCTION
FUNCTION AddOrder()
Display "--- Add New Order ---"
name = Get user input for customer name
IF name is empty THEN
    Display "Order cancelled."
    RETURN
END IF

profile = NULL

// Check if customer exists in database
IF name exists in cd THEN
    Display "Customer Found"
    profile = cd[name]
    Display customer details (name, phone, order history)
ELSE
    // Try case-insensitive search
    found = false
    FOR each key in cd
        IF key.lowercase equals name.lowercase THEN
            Display "Customer Found"
            profile = cd[key]
            name = key // Use existing case-sensitive key
            Display customer details
            found = true
            BREAK
        END IF
    END FOR
    
    // If not found, create new profile
    IF NOT found THEN
        Display "No Record Found. Create a New Profile."
        full_name = name
        phone_number = Get user input for phone number
        
        profile = {
            "name": full_name,
            "phone": phone_number,
            "order_history": []
        }
        Add profile to cd with key full_name
    END IF
END IF

order_id = name
Display "Assigned Tag: " + order_id

// Get order details
date_in = GetValidDateInput("Enter Date In (YYYY-MM-DD): ")
date_out = GetValidDateInput("Enter Date Out (YYYY-MM-DD): ")

// Get number of items
REPEAT
    TRY
        item_count = Get integer input for number of items
        IF item_count >= 1 THEN
            BREAK loop
        ELSE
            Display "Value must be at least 1."
        END IF
    CATCH ValueError
        Display "Please enter a valid number."
    END TRY
UNTIL valid input received

// Get service type
Display service options menu
REPEAT
    TRY
        service_choice = Get integer input for service choice (1-3)
        IF 1 <= service_choice <= 3 THEN
            BREAK loop
        ELSE
            Display "Please enter a number between 1 and 3."
        END IF
    CATCH ValueError
        Display "Please enter a valid number."
    END TRY
UNTIL valid input received

// Determine service type and price
IF service_choice = 1 THEN
    service_type = "Wash Only"
    price = 20.0
ELSE IF service_choice = 2 THEN
    service_type = "Wash and Dry"
    price = 35.0
ELSE IF service_choice = 3 THEN
    service_type = "Full Service"
    price = 50.0
END IF

total_price = item_count * price
Display "Total Price: P" + total_price

// Confirm order
confirm = Get user input "Do you want to save this order? (yes/no): "

IF confirm equals "yes" THEN
    // Create new order
    new_order = Create new Order object with collected information
    
    // Add to pending orders and update customer history
    Add new_order to ql
    Add order_id to profile["order_history"]
    
    Display "Order saved successfully."
ELSE
    Display "Order not saved."
END IF

Wait for user to press Enter
END FUNCTION
FUNCTION ViewQueue()
REPEAT
Display "--- View Queue ---" and options
    // Get user choice with validation
    REPEAT
        TRY
            queue_choice = Get integer input for choice (1-3)
            IF 1 <= queue_choice <= 3 THEN
                BREAK loop
            ELSE
                Display "Please enter a number between 1 and 3."
            END IF
        CATCH ValueError
            Display "Please enter a valid number."
        END TRY
    UNTIL valid input received
    
    // Process choice
    IF queue_choice = 1 THEN
        Display "Pending Orders:"
        IF ql is empty THEN
            Display "No pending orders."
        ELSE
            FOR each order in ql with index i
                Display order information
            END FOR
        END IF
    
    ELSE IF queue_choice = 2 THEN
        Display "Completed Orders:"
        IF col is empty THEN
            Display "No completed orders."
        ELSE
            FOR each order in col with index i
                Display order information
            END FOR
        END IF
    
    ELSE IF queue_choice = 3 THEN
        RETURN to previous menu
    END IF
    
    Wait for user to press Enter
    return_choice = Get user input "Would you like to return to the menu? (yes/no): "
    IF return_choice equals "yes" THEN
        RETURN to previous menu
    END IF
UNTIL user chooses to return
END FUNCTION
FUNCTION ProcessOrdersFIFO()
Display "--- Process Orders (FIFO) ---"
IF ql is empty THEN
    Display "No pending orders to process."
    Wait for user to press Enter
    RETURN
END IF

TRY
    // Sort pending orders by date_in
    sorted_queue = Sort ql by date_in (oldest first)
    
    Display "Pending Orders (Sorted by Date In, Oldest First):"
    FOR each order in sorted_queue with index i
        Display order information
    END FOR
    
    // Get user choice with validation
    REPEAT
        TRY
            order_num = Get integer input for order number (0 to cancel)
            IF 0 <= order_num <= length of sorted_queue THEN
                BREAK loop
            ELSE
                Display "Please enter a number between 0 and " + length of sorted_queue
            END IF
        CATCH ValueError
            Display "Please enter a valid number."
        END TRY
    UNTIL valid input received
    
    IF order_num = 0 THEN
        Display "Order processing cancelled."
        Wait for user to press Enter
        RETURN
    END IF
    
    selected_order = sorted_queue[order_num - 1]
    
    Display order details
    
    confirm = Get user input "Mark this order as completed? (yes/no): "
    
    IF confirm equals "yes" THEN
        selected_order.status = "Completed"
        Remove selected_order from ql
        Add selected_order to col
        
        Display "Order processed and marked as completed."
    ELSE
        Display "Order processing cancelled."
    END IF

CATCH Exception as e
    Display "An error occurred: " + e
END TRY

Wait for user to press Enter
END FUNCTION
FUNCTION CreateReportMenu()
REPEAT
Display "--- LaundroTrack Report Menu ---" and options
    // Get user choice with validation
    REPEAT
        TRY
            choice = Get integer input for choice (1-3)
            IF 1 <= choice <= 3 THEN
                BREAK loop
            ELSE
                Display "Please enter a number between 1 and 3."
            END IF
        CATCH ValueError
            Display "Please enter a valid number."
        END TRY
    UNTIL valid input received
    
    IF choice = 1 THEN
        // Generate Service Report
        search_name = Get user input for customer name
        found_order = NULL

        // Search for matching customer name
        FOR each order in combined ql and col
            IF order.customer_name.lowercase equals search_name.lowercase THEN
                found_order = order
                BREAK
            END IF
        END FOR
        
        IF found_order is NULL THEN
            Display "Error: Customer Name not found."
        ELSE
            Display order report with all details
        END IF
    
    ELSE IF choice = 2 THEN
        // Sort Completed Orders
        Display "--- Sorting Orders (FIFO by Date In) ---"
        
        IF col is empty THEN
            Display "No completed orders to sort."
        ELSE
            TRY
                sorted_orders = Sort col by date_in
                
                FOR each order in sorted_orders with index i
                    Display order information
                END FOR
            CATCH Exception as e
                Display "Error sorting orders: " + e
            END TRY
        END IF
    
    ELSE IF choice = 3 THEN
        Display "Returning to Main Menu..."
        RETURN
    END IF
    
    Wait for user to press Enter
UNTIL user chooses to return
END FUNCTION
FUNCTION DisplayOrderMenu()
REPEAT
TRY
Display "Welcome to LaundroTrack - Order Menu" and options
        // Get user choice with validation
        REPEAT
            TRY
                choice = Get integer input for choice (1-4)
                IF 1 <= choice <= 4 THEN
                    BREAK loop
                ELSE
                    Display "Please enter a number between 1 and 4."
                END IF
            CATCH ValueError
                Display "Please enter a valid number."
            END TRY
        UNTIL valid input received
        
        IF choice = 1 THEN
            CALL AddOrder()
        ELSE IF choice = 2 THEN
            CALL ViewQueue()
        ELSE IF choice = 3 THEN
            CALL CreateReportMenu()
        ELSE IF choice = 4 THEN
            Display "Returning to Main Menu..."
            RETURN
        END IF
    CATCH Exception as e
        Display "An unexpected error occurred: " + e
        Wait for user to press Enter
    END TRY
UNTIL user chooses to return
END FUNCTION
FUNCTION Main()
TRY
Display "=== Welcome to LaundroTrack System ==="
    // Main program loop
    REPEAT
        TRY
            Display "=== MAIN MENU ===" and options
            
            // Get user choice with validation
            REPEAT
                TRY
                    choice = Get integer input for choice (1-3)
                    IF 1 <= choice <= 3 THEN
                        BREAK loop
                    ELSE
                        Display "Please enter a number between 1 and 3."
                    END IF
                CATCH ValueError
                    Display "Please enter a valid number."
                END TRY
            UNTIL valid input received
            
            IF choice = 1 THEN
                CALL DisplayOrderMenu()
            ELSE IF choice = 2 THEN
                CALL ProcessOrdersFIFO()
            ELSE IF choice = 3 THEN
                confirm = Get user input "Are you sure you want to exit? (yes/no): "
                IF confirm equals "yes" THEN
                    Display "Thank you for using LaundroTrack. Goodbye!"
                    BREAK main loop
                END IF
            END IF
        CATCH Exception as e
            Display "An error occurred: " + e
            Wait for user to press Enter
        END TRY
    UNTIL user chooses to exit

CATCH Exception as e
    Display "A critical error occurred: " + e
    Display "The system will now prompt you to exit safely."
    Wait for user to press Enter

FINALLY
    Display "Exiting LaundroTrack System..."
END TRY
END FUNCTION
